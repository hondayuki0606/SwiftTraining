//
//  Ofthepattern.swift
//  testGame
//
//  Created by 本田尚行 on 2020/12/12.
//  Copyright © 2020 本田尚行. All rights reserved.
//

import Foundation

//本節ではオブザパターンについて説明します。
//ここまで、オブジェクト間でのイベント通知の方法として、デリゲートパターンとクロージャパターンを用いた方法を
//説明してきましたが、これらは１体１のイベント通知でしか有効ではありません。
//例えば、デリゲートパターンでは、デリゲート先となるオブジェクトは１つで同じイベントを複数のオブジェクトで
//受け取ろうとすると、その数だけデリゲート先を追加しなければなりません。
//同じくコールバックも、呼び出し元しか、その結果を知ることはできません。
//
//しかし、１つのイベントの結果を複数のオブジェクトが知る必要がある場合もあります。
//例えば、特定のオブジェクトが変更されたタイミング複数の画面が更新されるようなケースが考えられます。
//オブザパターンがは、こうした１体多のイベント通知を可能にします。実際に、Cocoa Touchではアプリケーションの起動や
//バックグラウンドへの遷移のイベントの通知にオブザパターンを使用しています。
//
//オブザーバーパターンの構成要素は、サブジェクトとオブザーバーです。オブザーバーは通知を受け取る対象で、
//サブジェクトはこのオブザーバーを管理し、必要なタイミングでオブザーバーに通知を発行します。
//通常、この通知は、オブザーバーのメソッドを呼び出すことで行われます。
//
//サブジェクトがオブザーバーに関して知っておく必要があるのは、オブザーバーの通知の受け口であるメソッドの
//インターフェースだけです。そのため、疎結合を保ったままオブジェクト間を連結させることができます。
//一方で、その柔軟さのために、むやみに多様してしまうとどのタイミングで通知が発生するのか予測しずくなり、
//処理を追うのが難しくなってしまいます。
//
//【実装方法】
