//
//  delegate.swift
//  testGame
//
//  Created by 本田尚行 on 2020/10/29.
//  Copyright © 2020 本田尚行. All rights reserved.
//
import Foundation

class delegate {
    func start(){
//    本項では、どのような時にデリゲートパターンを使用するかを説明します。
//        ２つのオブジェクト間で多くの種類のイベント通知を行う場合
//        
//        1 非同期処理を開始したタイミングで、プログレスバーを表示する
//        2 非同期処理の途中で、定期的にプログレスバーを更新する。
//        3 非同期処理が完了したタイミングで、プログレスバーを非表示にする
//        4 非同期処理が失敗したタイミングでプログレスバーで、エラーダイアログを表示する
//        
//        外部からのカスタマイズを前提としたオブジェクトを設計する
//        オブジェクトの中には外部からのカスタマイズを前提とした設計が適しています。そのようなケースでは
//        デリゲートパターンを採用するのが良いでしょう。
//        デリゲートパターンでは、カスタマイズ可能な処理をプロトコルとして定義するため、オブジェクトのどの
//        振る舞いがカスタマイズ可能かは明らかです。
        
    }
}
